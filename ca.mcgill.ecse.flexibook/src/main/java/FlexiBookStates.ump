class Appointment {   
  depend java.sql.Date;
  depend java.sql.Time;
  
  appointmentStatus {
    Booked {
      startAppointment(Date currentDate, Time currentTime) [isDuringAppointment(currentDate, currentTime)] -> InProgress;
      
      cancel -> Final;
      noShow(Date currentDate, Time currentTime) [isDuringAppointment(currentDate, currentTime)] -> /{incrementCustomerNoShow();} Final;
        
      changeOptionalService(Service newService, boolean isAdd, Date currentDate) [isDayBeforeAppointment(currentDate) && isServiceCombo()] -> /{doChangeOptionalService(newService, isAdd);} Booked;
      changeDateAndTime(Date newDate, Time newTime, Date currentDate) [isDayBeforeAppointment(currentDate)] -> /{doChangeDateAndTime(newDate, newTime);} Booked;
    }  
     
    InProgress {  
      endAppointment -> Final;
      
      changeOptionalService(Service newService, boolean isAdd, Date currentDate) [isServiceCombo()] -> /{doChangeOptionalService(newService, isAdd);} InProgress;
      changeDateAndTime(Date newDate, Time newTime, Date currentDate) -> /{rejectChangeDateAndTime();} InProgress;
    }
  }  
  
  private boolean isServiceCombo() {
    return getBookableService() instanceof ServiceCombo;
  }

  private boolean isDayBeforeAppointment(Date currentDate) {
	if ((timeSlot.getStartDate.after(currentDate)) && (timeSlot.getStartDate.getDate() - currentDate.getDate() == 1))
		return true;
	}else{
		return false;
	}
  }
  private boolean isDuringAppointment(Date currentDate, Time currentTime) {
  	 if (timeSlot.getStartDate().equals(currentDate)){
	  	 if (!timeSlot.getStartTime.after(currentTime) && !timeSlot.getEndTime().before(currentTime){
	  	 	return true;
	     }else{
	     	return false;
	     }
  	 }else{
  	 	return false;
  	 }
  }
    
  private void incrementCustomerNoShow() {
    getCustomer().incrementNoShowCount();
  }
  
  private void doChangeOptionalService(Service newService, boolean isAdd) {
    
  }
  
  private void doChangeDateAndTime(Date newDate, Time newTime) {
    
  }
  
   private void rejectChangeDateAndTime() {
     throw new RuntimeException("Cannot change date and time of an appointment in progress.");
  }
}