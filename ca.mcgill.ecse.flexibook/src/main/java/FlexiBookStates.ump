class Appointment {   
  depend java.sql.Date;
  depend java.sql.Time;
  
  appointmentStatus {
    Booked {
      start(Date currentDate, Time currentTime) [isDuringAppointment(currentDate, currentTime)] -> InProgress;
      
      cancel -> Final;
      noShow(Date currentDate, Time currentTime) [isDuringAppointment(currentDate, currentTime)] -> /{incrementCustomerNoShow();} Final;
        
      changeOptionalService(ComboItem newService, boolean isAdd, Date currentDate) [isDayBeforeAppointment(currentDate) && isServiceCombo()] -> /{doChangeOptionalService(newService, isAdd);} Booked;
      changeDateAndTime(Date newDate, Time newTime, Date currentDate) [isDayBeforeAppointment(currentDate)] -> /{doChangeDateAndTime(newDate, newTime);} Booked;
    }  
     
    InProgress {  
      end -> Final;
      
      cancel -> /{rejectCancel();} InProgress;
      
      changeOptionalService(ComboItem newService, boolean isAdd, Date currentDate) [isServiceCombo()] -> /{doChangeOptionalService(newService, isAdd);} InProgress;
      changeDateAndTime(Date newDate, Time newTime, Date currentDate) -> /{rejectChangeDateAndTime();} InProgress;
    }
  }  
  
  private boolean isServiceCombo() {
    return getBookableService() instanceof ServiceCombo;
  }

  private boolean isDayBeforeAppointment(Date currentDate) {
	return timeSlot.getStartDate().after(currentDate);
  }
  private boolean isDuringAppointment(Date currentDate, Time currentTime) {
	return timeSlot.getStartDate().equals(currentDate) && !timeSlot.getStartTime().after(currentTime) && !timeSlot.getEndTime().before(currentTime);
  }
    
  private void incrementCustomerNoShow() {
    getCustomer().incrementNoShowCount();
  }
  
  private void doChangeOptionalService(ComboItem newService, boolean isAdd) {
    ServiceCombo sc = (ServiceCombo) bookableService;
    if (isAdd) {
      int itemPos = 0;
      for (ComboItem ci : sc.getServices()) {
        if (chosenItems.contains(ci)) {
          itemPos++;
        } else if (ci == newService) {
          break;
        }
      }
      addChosenItemAt(newService, itemPos);
      timeSlot.setEndTime(new Time(timeSlot.getEndTime().getTime() + newService.getService().getDuration() * 60 * 1000));
    } else {
      removeChosenItem(newService);
      timeSlot.setEndTime(new Time(timeSlot.getEndTime().getTime() - newService.getService().getDuration() * 60 * 1000));
    }
  }
  
  private void doChangeDateAndTime(Date newDate, Time newTime) {
    timeSlot.setStartDate(newDate);
    timeSlot.setEndDate(newDate);
    timeSlot.setEndTime(new Time(timeSlot.getEndTime().getTime() - timeSlot.getStartTime().getTime() + newTime.getTime()));
    timeSlot.setStartTime(newTime);
  }
  
  private void rejectCancel() {
  	throw new RuntimeException("Cannot cancel an appointment on the appointment date");
  }
  
  private void rejectNoShow() {
  	throw new RuntimeException("Cannot register a no-show for an appointment while it is on progress");
  }
  
  private void rejectChangeDateAndTime() {
     throw new RuntimeException("Cannot change date and time of an appointment in progress");
  }
}